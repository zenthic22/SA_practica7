name: CI/CD – SA P7

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_USER: ${{ secrets.DOCKERHUB_USER }}
  REGISTRY_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  REGISTRY: docker.io
  REPO: zenthic22
  SERVICES: |
    gateway
    movies
    actors
    reviews
    users
    cronjob-runner

jobs:
  build_push:
    name: Build & Push Docker images
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Build & Push (loop)
        run: |
          set -euo pipefail
          TAG=${{ steps.vars.outputs.SHORT_SHA }}
          for svc in $SERVICES; do
            case "$svc" in
              cronjob-runner) ctx="cronjob-runner"; img="$REPO/cronjob";;
              *)               ctx="$svc";           img="$REPO/$svc";;
            esac
            echo "==> Building $img from $ctx"
            docker build -t $REGISTRY/$img:latest -t $REGISTRY/$img:$TAG $ctx
            docker push $REGISTRY/$img:latest
            docker push $REGISTRY/$img:$TAG
          done
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REPO: ${{ env.REPO }}
          SERVICES: ${{ env.SERVICES }}

      - name: Upload image tag artifact
        run: echo "${{ steps.vars.outputs.SHORT_SHA }}" > image_tag.txt
      - uses: actions/upload-artifact@v4
        with: { name: image_tag, path: image_tag.txt }

  deploy_via_ssh:
    name: Deploy to K8s (via SSH on master)
    runs-on: ubuntu-latest
    needs: [build_push]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download image tag
        uses: actions/download-artifact@v4
        with: { name: image_tag, path: . }

      - name: Read tag
        id: tag
        run: echo "TAG=$(cat image_tag.txt)" >> $GITHUB_OUTPUT

      - name: Prepare deploy script
        run: |
          cat > deploy.sh <<'EOS'
          set -euo pipefail

          NS=sa-p5
          TAG="$1"
          TIMEOUT=300s

          echo "[*] kubectl context:"
          kubectl cluster-info || true

          echo "[*] Apply namespace first"
          kubectl apply -f k8s/namespace.yaml

          echo "[*] Apply app manifests"
          kubectl -n "$NS" apply -f k8s/mysql/
          kubectl -n "$NS" apply -f k8s/actors/
          kubectl -n "$NS" apply -f k8s/movies/
          kubectl -n "$NS" apply -f k8s/reviews/
          kubectl -n "$NS" apply -f k8s/users/
          kubectl -n "$NS" apply -f k8s/gateway/
          kubectl -n "$NS" apply -f k8s/cronjob/

          # Función helper para esperar rollout con diagnóstico en fallo
          wait_rollout() {
            local kind="$1" name="$2" label="$3"
            echo "[*] Waiting rollout $kind/$name ..."
            if ! kubectl -n "$NS" rollout status "$kind/$name" --timeout="$TIMEOUT"; then
              echo "[!] Rollout failed for $kind/$name. Dumping diagnostics..."
              kubectl -n "$NS" describe "$kind/$name" || true
              [ -n "$label" ] && kubectl -n "$NS" get pods -l "$label" -o wide || true
              [ -n "$label" ] && kubectl -n "$NS" describe pods -l "$label" || true
              exit 1
            fi
          }

          echo "[*] Scale down to 1 replica to ease quota pressure"
          kubectl -n "$NS" scale deploy/actors  --replicas=1 || true
          kubectl -n "$NS" scale deploy/movies  --replicas=1 || true
          kubectl -n "$NS" scale deploy/reviews --replicas=1 || true
          kubectl -n "$NS" scale deploy/users   --replicas=1 || true
          kubectl -n "$NS" scale deploy/gateway --replicas=1 || true

          echo "[*] Patch images with immutable tag $TAG"
          kubectl -n "$NS" set image deploy/actors   actors=docker.io/zenthic22/actors:$TAG
          kubectl -n "$NS" set image deploy/movies   movies=docker.io/zenthic22/movies:$TAG
          kubectl -n "$NS" set image deploy/reviews  reviews=docker.io/zenthic22/reviews:$TAG
          kubectl -n "$NS" set image deploy/users    users=docker.io/zenthic22/users:$TAG
          kubectl -n "$NS" set image deploy/gateway  gateway=docker.io/zenthic22/gateway:$TAG

          echo "[*] Patch cronjob image"
          kubectl -n "$NS" patch cronjob/cron-insert --type='json' \
            -p="[{'op':'replace','path':'/spec/jobTemplate/spec/template/spec/containers/0/image','value':'docker.io/zenthic22/cronjob:$TAG'}]"

          # Esperar rollouts (1 réplica)
          wait_rollout deploy actors  "app=actors"
          wait_rollout deploy movies  "app=movies"
          wait_rollout deploy reviews "app=reviews"
          wait_rollout deploy users   "app=users"
          wait_rollout deploy gateway "app=gateway"

          echo "[*] Scale up back to 2 replicas"
          kubectl -n "$NS" scale deploy/actors  --replicas=2
          kubectl -n "$NS" scale deploy/movies  --replicas=2
          kubectl -n "$NS" scale deploy/reviews --replicas=2
          kubectl -n "$NS" scale deploy/users   --replicas=2
          kubectl -n "$NS" scale deploy/gateway --replicas=2

          # Esperar nuevamente (por si tarda en programar la 2da réplica)
          wait_rollout deploy actors  "app=actors"
          wait_rollout deploy movies  "app=movies"
          wait_rollout deploy reviews "app=reviews"
          wait_rollout deploy users   "app=users"
          wait_rollout deploy gateway "app=gateway"

          echo "[*] Resumen:"
          kubectl -n "$NS" get pods,svc,ingress,hpa
          EOS
          chmod +x deploy.sh

      - name: Copy repo (k8s/ + script) to master
        uses: appleboy/scp-action@v0.1.7
        with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USER }}
            key: ${{ secrets.SSH_KEY }}
            port: 22
            source: "./k8s/**,deploy.sh"
            target: "/home/${{ secrets.SSH_USER }}/sa-p5/"

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USER }}
            key: ${{ secrets.SSH_KEY }}
            port: 22
            script_stop: true
            command_timeout: 30m
            envs: REPO
            script: |
                set -euo pipefail
                echo "[preflight] whoami: $(whoami), host: $(hostname)"
                mkdir -p ~/sa-p5
                cd ~/sa-p5
                # kubeconfig del master
                if [ ! -f ~/.kube/config ]; then
                    mkdir -p ~/.kube
                    sudo cat /etc/kubernetes/admin.conf > ~/.kube/config
                    chmod 600 ~/.kube/config
                fi
                ./deploy.sh "${{ steps.tag.outputs.TAG }}"